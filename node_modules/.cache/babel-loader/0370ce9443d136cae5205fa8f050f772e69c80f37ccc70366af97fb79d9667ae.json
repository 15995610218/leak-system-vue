{"ast":null,"code":"import base from \"@/api/base\";\nimport request from \"@/utils/request\";\nimport { requestUser } from \"@/api\";\nimport { requestAddUser } from \"@/api\";\nimport { requestDelUser } from \"@/api\";\nimport { requestUpdateUser } from \"@/api\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    //设置密码校验\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.userForm.checkPass !== '') {\n          this.$refs.userForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.userForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      //表单数据\n      userDate: [],\n      //选择数据\n      multipleSelection: [],\n      tmpIds: [],\n      //添加数据\n      userForm: {\n        username: '',\n        password: '',\n        checkPass: '',\n        rid: '',\n        status: ''\n      },\n      //修改数据\n      modifyForm: {},\n      //添加数据页面开关\n      dialogAddUser: false,\n      //修改用户页面开关\n      dialogModifyUser: false,\n      //设置密码校验\n      rules: {\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    //根据不同值显示不同名称\n    stateFormat(row, column) {\n      if (row.status === '1') {\n        return '启用';\n      } else {\n        return '禁用';\n      }\n    },\n    //添加用户单击事件\n    UserAddSubmit(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.userAdd(this.userForm);\n        } else {\n          this.$message.error(\"两次输入密码不一致!\");\n          return false;\n        }\n      });\n    },\n    //删除用户单击事件\n    UserDelSubmit() {\n      for (let i = 0; i < this.multipleSelection.length; i++) {\n        let tmpUser = this.multipleSelection[i];\n        this.tmpIds[i] = tmpUser.uid;\n      }\n      console.log(this.tmpIds.length);\n      if (this.tmpIds.length == 0) {\n        this.$message({\n          type: 'info',\n          message: '请选择要删除的数据！'\n        });\n        return;\n      }\n      this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.userDelete(this.tmpIds);\n        this.tmpIds = [];\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n        this.tmpIds = [];\n      });\n    },\n    //修改用户单击事件\n    handleEdit(index, row) {\n      this.modifyForm = row;\n      this.dialogModifyUser = true;\n    },\n    //修改用户提交事件\n    UserModifySubmit() {\n      this.userUpdate(this.modifyForm);\n      this.dialogModifyUser = false;\n    },\n    //选择用户事件\n    handleSelectionChange(val) {\n      this.multipleSelection = val;\n      console.log(this.multipleSelection);\n    },\n    //后台交互-查询用户数据\n    async userRequest() {\n      let userdata = await requestUser();\n      this.userDate = userdata;\n    },\n    //后台交互-添加用户数据\n    async userAdd(userForm) {\n      let data = await requestAddUser(userForm);\n      if (data.state === 200) {\n        this.$message.success('添加用户成功!');\n        this.userForm = {};\n        this.userRequest();\n      }\n      this.dialogAddUser = false;\n    },\n    async userDelete(ids) {\n      let data = await requestDelUser(ids);\n      if (data.state === 200) {\n        this.$message.success('删除成功!');\n        this.userRequest();\n      } else {\n        this.$message.error(data.message);\n      }\n    },\n    //后台交互-更新用户数据\n    async userUpdate(modifyUser) {\n      let updateDate = requestUpdateUser(modifyUser);\n      if (updateDate.state === 200) {\n        this.$message.success(updateDate.message);\n        this.userRequest();\n      } else {\n        this.$message.error(updateDate.message);\n      }\n    }\n    //     request({\n    //         method:'POST',\n    //         url:'/user/updateuser',\n    //         data:modifyUser\n    //     }).then(res => {\n    //         if (res.data.state === 200){\n    //             this.$message.success('更新成功!');\n    //             this.userRequest();\n    //         }\n    //     }).catch(err => {\n    //         this.$message.error(err.message);\n    //     })\n    // }\n  },\n\n  created() {\n    this.userRequest();\n  }\n};","map":{"version":3,"mappings":"AAuGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;IACA;IACA;MACA;QACAC;MACA;QACA;UACA;QACA;QACAA;MACA;IACA;IACA;MACA;QACAA;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACA;MACAC;MACA;MACAC;MACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACA;MACAC;MACA;MACAC;MACA;MACAC;MACA;MACAC;QACAP,WACA;UAAAQ;UAAAC;QAAA,EACA;QACAR,YACA;UAAAO;UAAAC;QAAA;MAEA;IACA;EACA;EACAC;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACA;IACAC;MACA;QACA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;IACA;IACAC;MACA;QACA;QACA;MACA;MACAC;MACA;QACA;UACAC;UACAC;QACA;QACA;MACA;MACA;QACAC;QACAC;QACAH;MACA;QACA;QACA;MACA;QACA;UACAA;UACAC;QACA;QACA;MACA;IACA;IACA;IACAG;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;IACA;IACA;IACAC;MACA;MACAP;IACA;IACA;IACA;MACA;MACA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;QACA;MACA;MACA;IAEA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;;EACAQ;IACA;EACA;AACA","names":["data","callback","userDate","multipleSelection","tmpIds","userForm","username","password","checkPass","rid","status","modifyForm","dialogAddUser","dialogModifyUser","rules","validator","trigger","methods","stateFormat","UserAddSubmit","UserDelSubmit","console","type","message","confirmButtonText","cancelButtonText","handleEdit","UserModifySubmit","handleSelectionChange","created"],"sourceRoot":"src/views/systemmanagement/usermanagement","sources":["usermanagement.vue"],"sourcesContent":["<template>\n    <!--表头位置-->\n    <div class=\"usermanagementClass\">\n        <div class=\"header\">\n            <el-button type=\"primary\" @click=\"dialogAddUser = true\">添加</el-button>\n            <el-button type=\"danger\" @click=\"UserDelSubmit\">删除</el-button>\n        </div>\n        <br>\n        <!--内容位置-->\n        <div class=\"warpper\">\n            <!--表单页面-->\n            <el-table :data=\"userDate\" height=\"500\" border style=\"width: 100%\" @selection-change=\"handleSelectionChange\">\n                <el-table-column type=\"selection\" width=\"50\"></el-table-column>\n                <el-table-column prop=\"username\" label=\"账号名称\" show-overflow-tooltip></el-table-column>\n                <el-table-column prop=\"title\" label=\"用户角色\"></el-table-column>\n                <el-table-column prop=\"status\" label=\"状态\" :formatter=\"stateFormat\"></el-table-column>\n                <el-table-column label=\"操作\" width=\"150\">\n                    <template slot-scope=\"scope\">\n                        <el-button\n                                size=\"mini\"\n                                type=\"primary\"\n                                icon=\"el-icon-edit\"\n                                circle\n                                @click=\"handleEdit(scope.$index, scope.row)\"></el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n            <!--添加用户页面-->\n            <el-dialog\n                    title=\"添加用户\"\n                    :visible.sync=\"dialogAddUser\">\n                <el-form ref=\"userForm\" :model=\"userForm\" :rules=\"rules\" label-width=\"80px\">\n                    <el-form-item label=\"用户名\">\n                        <el-input v-model=\"userForm.username\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"密码\" prop=\"password\">\n                        <el-input type=\"password\" v-model=\"userForm.password\" autocomplete=\"off\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"确认密码\" prop=\"checkPass\">\n                        <el-input type=\"password\" v-model=\"userForm.checkPass\" autocomplete=\"off\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"用户角色\">\n                        <el-select v-model=\"userForm.rid\" placeholder=\"请选择用户权限\">\n                            <el-option label=\"超级管理员\" value=\"1\"></el-option>\n                            <el-option label=\"昆山管理员\" value=\"3\"></el-option>\n                            <el-option label=\"北京管理员\" value=\"2\"></el-option>\n                            <el-option label=\"合肥管理员\" value=\"5\"></el-option>\n                            <el-option label=\"西安管理员\" value=\"4\"></el-option>\n                            <el-option label=\"昆山普通用户\" value=\"8\"></el-option>\n                            <el-option label=\"西安普通用户\" value=\"7\"></el-option>\n                            <el-option label=\"北京普通用户\" value=\"9\"></el-option>\n                            <el-option label=\"合肥普通用户\" value=\"6\"></el-option>\n                        </el-select>\n                    </el-form-item>\n                    <el-form-item label=\"用户状态\">\n                        <el-select v-model=\"userForm.status\" placeholder=\"请选择用户状态\">\n                            <el-option label=\"启动\" value=\"1\"></el-option>\n                            <el-option label=\"禁用\" value=\"2\"></el-option>\n                        </el-select>\n                    </el-form-item>\n                    <el-form-item>\n                        <el-button type=\"primary\" @click=\"UserAddSubmit('userForm')\">提交</el-button>\n                        <el-button @click=\"dialogAddUser = false\">取消</el-button>\n                    </el-form-item>\n                </el-form>\n            </el-dialog>\n            <!--修改用户页面-->\n            <el-dialog\n                    title=\"修改用户\"\n                    :visible.sync=\"dialogModifyUser\">\n                <el-form ref=\"modifyForm\" :model=\"modifyForm\" label-width=\"80px\">\n                    <el-form-item label=\"账号名称\">\n                        <el-input v-model=\"modifyForm.username\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"用户角色\">\n                        <el-select v-model=\"modifyForm.rid\" placeholder=\"请选择用户角色\">\n                            <el-option label=\"超级管理员\" value=\"1\"></el-option>\n                            <el-option label=\"昆山管理员\" value=\"3\"></el-option>\n                            <el-option label=\"北京管理员\" value=\"2\"></el-option>\n                            <el-option label=\"合肥管理员\" value=\"5\"></el-option>\n                            <el-option label=\"西安管理员\" value=\"4\"></el-option>\n                            <el-option label=\"昆山普通用户\" value=\"8\"></el-option>\n                            <el-option label=\"西安普通用户\" value=\"7\"></el-option>\n                            <el-option label=\"北京普通用户\" value=\"9\"></el-option>\n                            <el-option label=\"合肥普通用户\" value=\"6\"></el-option>\n                        </el-select>\n                    </el-form-item>\n                    <el-form-item label=\"用户状态\">\n                        <el-select v-model=\"modifyForm.status\" placeholder=\"请选择用户状态\">\n                            <el-option label=\"启动\" value=\"1\"></el-option>\n                            <el-option label=\"禁用\" value=\"2\"></el-option>\n                        </el-select>\n                    </el-form-item>\n                    <el-form-item>\n                        <el-button type=\"primary\" @click=\"UserModifySubmit\">提交</el-button>\n                        <el-button @click=\"dialogModifyUser = false\">取消</el-button>\n                    </el-form-item>\n                </el-form>\n            </el-dialog>\n        </div>\n    </div>\n</template>\n<script>\n    import base from \"@/api/base\"\n    import request from \"@/utils/request\";\n    import { requestUser } from \"@/api\";\n    import { requestAddUser } from \"@/api\";\n    import { requestDelUser } from \"@/api\";\n    import { requestUpdateUser } from \"@/api\";\n    import axios from \"axios\";\n    export default {\n        data(){\n            //设置密码校验\n            var validatePass = (rule, value, callback) => {\n                if (value === '') {\n                    callback(new Error('请输入密码'));\n                } else {\n                    if (this.userForm.checkPass !== '') {\n                        this.$refs.userForm.validateField('checkPass');\n                    }\n                    callback();\n                }\n            };\n            var validatePass2 = (rule, value, callback) => {\n                if (value === '') {\n                    callback(new Error('请再次输入密码'));\n                } else if (value !== this.userForm.password) {\n                    callback(new Error('两次输入密码不一致!'));\n                } else {\n                    callback();\n                }\n            };\n            return{\n                //表单数据\n                userDate:[],\n                //选择数据\n                multipleSelection:[],\n                tmpIds:[],\n                //添加数据\n                userForm:{\n                    username:'',\n                    password:'',\n                    checkPass:'',\n                    rid:'',\n                    status:''\n                },\n                //修改数据\n                modifyForm:{},\n                //添加数据页面开关\n                dialogAddUser:false,\n                //修改用户页面开关\n                dialogModifyUser:false,\n                //设置密码校验\n                rules: {\n                    password: [\n                        { validator: validatePass, trigger: 'blur' }\n                    ],\n                    checkPass: [\n                        { validator: validatePass2, trigger: 'blur' }\n                    ]\n                }\n            }\n        },\n        methods:{\n            //根据不同值显示不同名称\n            stateFormat(row,column){\n                if (row.status === '1'){\n                    return '启用'\n                }else {\n                    return '禁用'\n                }\n            },\n            //添加用户单击事件\n            UserAddSubmit(formName){\n                this.$refs[formName].validate((valid) => {\n                    if (valid) {\n                        this.userAdd(this.userForm);\n                    } else {\n                        this.$message.error(\"两次输入密码不一致!\")\n                        return false;\n                    }\n                });\n            },\n            //删除用户单击事件\n            UserDelSubmit(){\n                for (let i = 0;i < this.multipleSelection.length;i++){\n                    let tmpUser = this.multipleSelection[i];\n                    this.tmpIds[i] = tmpUser.uid;\n                }\n                console.log(this.tmpIds.length);\n                if (this.tmpIds.length == 0){\n                    this.$message({\n                        type: 'info',\n                        message: '请选择要删除的数据！'\n                    });\n                    return;\n                }\n                this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    this.userDelete(this.tmpIds);\n                    this.tmpIds = [];\n                }).catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    });\n                    this.tmpIds = [];\n                });\n            },\n            //修改用户单击事件\n            handleEdit(index,row){\n                this.modifyForm = row;\n                this.dialogModifyUser = true;\n            },\n            //修改用户提交事件\n            UserModifySubmit(){\n                this.userUpdate(this.modifyForm);\n                this.dialogModifyUser = false;\n            },\n            //选择用户事件\n            handleSelectionChange(val){\n                this.multipleSelection = val;\n                console.log(this.multipleSelection);\n            },\n            //后台交互-查询用户数据\n            async userRequest(){\n                let userdata = await requestUser();\n                this.userDate = userdata;\n            },\n            //后台交互-添加用户数据\n            async userAdd(userForm){\n                let data = await requestAddUser(userForm);\n                if (data.state === 200){\n                    this.$message.success('添加用户成功!');\n                    this.userForm={};\n                    this.userRequest();\n                }\n                this.dialogAddUser = false;\n\n            },\n            async userDelete(ids){\n                let data = await requestDelUser(ids);\n                if (data.state === 200){\n                    this.$message.success('删除成功!');\n                    this.userRequest();\n                }else {\n                    this.$message.error(data.message);\n                }\n            },\n            //后台交互-更新用户数据\n            async userUpdate(modifyUser){\n                let updateDate = requestUpdateUser(modifyUser);\n                if (updateDate.state === 200){\n                    this.$message.success(updateDate.message);\n                    this.userRequest();\n                }else {\n                    this.$message.error(updateDate.message);\n                }\n            }\n            //     request({\n            //         method:'POST',\n            //         url:'/user/updateuser',\n            //         data:modifyUser\n            //     }).then(res => {\n            //         if (res.data.state === 200){\n            //             this.$message.success('更新成功!');\n            //             this.userRequest();\n            //         }\n            //     }).catch(err => {\n            //         this.$message.error(err.message);\n            //     })\n            // }\n        },\n        created(){\n            this.userRequest();\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    .usermanagementClass{\n        margin: 20px;\n    }\n    .header{\n        display: flex;\n    }\n    .header button {\n        margin-left: 20px;\n    }\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}