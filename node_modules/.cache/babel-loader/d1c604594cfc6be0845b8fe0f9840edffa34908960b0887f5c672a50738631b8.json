{"ast":null,"code":"import base from \"@/api/base\";\nimport request from \"@/utils/request\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    //设置密码校验\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.userForm.checkPass !== '') {\n          this.$refs.userForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.userForm.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      //表单数据\n      userDate: [],\n      //选择数据\n      multipleSelection: [],\n      //添加数据\n      userForm: {\n        username: '',\n        password: '',\n        checkPass: '',\n        perms: ''\n      },\n      //添加数据页面开关\n      dialogAddUser: false,\n      //设置密码校验\n      rules: {\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    //添加用户单击事件\n    UserAddSubmit(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.userAdd(this.userForm.username, this.userForm.password, this.userForm.perms);\n        } else {\n          this.$message.error(\"两次输入密码不一致!\");\n          return false;\n        }\n      });\n    },\n    //删除用户单击事件\n    UserDelSubmit() {\n      console.log('删除用户');\n    },\n    //修改用户单击事件\n    handleEdit() {\n      console.log('修改用户');\n    },\n    //选择用户事件\n    handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    //获取后台数据\n    async userRequest() {\n      await request({\n        method: 'GET',\n        url: '/user/userinformation'\n      }).then(res => {\n        this.userDate = res.data.data;\n      }).catch(err => {\n        this.$message.error(err.message);\n      });\n    },\n    async userAdd(username, password, perms) {\n      request({\n        method: 'POST',\n        url: '/user/register',\n        data: {\n          username,\n          password,\n          perms\n        }\n      }).then(res => {\n        if (res.data.state === 200) {\n          this.$message.success(\"添加成功!\");\n          this.userRequest();\n          this.dialogAddUser = false;\n        }\n      }).catch(err => {\n        this.$message.error(err.message);\n      });\n    }\n  },\n  created() {\n    this.userRequest();\n  }\n};","map":{"version":3,"mappings":"AAyDA;AACA;AACA;AACA;EACAA;IACA;IACA;MACA;QACAC;MACA;QACA;UACA;QACA;QACAA;MACA;IACA;IACA;MACA;QACAA;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACA;MACAC;MACA;MACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACA;MACAC;MACA;MACAC;QACAJ,WACA;UAAAK;UAAAC;QAAA,EACA;QACAL,YACA;UAAAI;UAAAC;QAAA;MAEA;IACA;EACA;EACAC;IACA;IACAC;MACA;QACA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;IACA;IACAC;MACAC;IACA;IACA;IACAC;MACAD;IACA;IACA;IACAE;MACA;IACA;IACA;IACA;MACA;QACAC;QACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACA;MACAC;QACAF;QACAC;QACApB;UAAAK;UAAAC;UAAAE;QAAA;MACA;QACA;UACA;UACA;UACA;QACA;MACA;QACA;MACA;IACA;EACA;EACAc;IACA;EACA;AACA","names":["data","callback","userDate","multipleSelection","userForm","username","password","checkPass","perms","dialogAddUser","rules","validator","trigger","methods","UserAddSubmit","UserDelSubmit","console","handleEdit","handleSelectionChange","method","url","request","created"],"sourceRoot":"src/views/systemmanagement/usermanagement","sources":["usermanagement.vue"],"sourcesContent":["<template>\n    <!--表头位置-->\n    <div class=\"usermanagementClass\">\n        <div class=\"header\">\n            <el-button type=\"primary\" @click=\"dialogAddUser = true\">添加</el-button>\n            <el-button type=\"danger\" @click=\"UserDelSubmit\">删除</el-button>\n        </div>\n        <br>\n        <!--内容位置-->\n        <div class=\"warpper\">\n            <!--表单页面-->\n            <el-table :data=\"userDate\" height=\"500\" border style=\"width: 100%\" @selection-change=\"handleSelectionChange\">\n                <el-table-column type=\"selection\" width=\"50\"></el-table-column>\n                <el-table-column prop=\"username\" label=\"账号名称\" show-overflow-tooltip></el-table-column>\n                <el-table-column prop=\"perms\" label=\"用户权限\"></el-table-column>\n                <el-table-column label=\"操作\" width=\"100\">\n                    <template slot-scope=\"scope\">\n                        <el-button\n                                size=\"mini\"\n                                type=\"primary\"\n                                icon=\"el-icon-edit\"\n                                circle\n                                @click=\"handleEdit(scope.$index, scope.row)\"></el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n            <!--添加用户页面-->\n            <el-dialog\n                    title=\"添加用户\"\n                    :visible.sync=\"dialogAddUser\">\n                <el-form ref=\"userForm\" :model=\"userForm\" :rules=\"rules\" label-width=\"80px\">\n                    <el-form-item label=\"用户名\">\n                        <el-input v-model=\"userForm.username\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"密码\" prop=\"password\">\n                        <el-input type=\"password\" v-model=\"userForm.password\" autocomplete=\"off\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"确认密码\" prop=\"checkPass\">\n                        <el-input type=\"password\" v-model=\"userForm.checkPass\" autocomplete=\"off\"></el-input>\n                    </el-form-item>\n                    <el-form-item label=\"权限管理\">\n                        <el-select v-model=\"userForm.perms\" placeholder=\"请选择用户权限\">\n                            <el-option label=\"管理权限\" value=\"user:admin\"></el-option>\n                            <el-option label=\"普通权限\" value=\"user:ordinary\"></el-option>\n                            <el-option label=\"审计权限\" value=\"user:audit\"></el-option>\n                        </el-select>\n                    </el-form-item>\n                    <el-form-item>\n                        <el-button type=\"primary\" @click=\"UserAddSubmit('userForm')\">提交</el-button>\n                        <el-button @click=\"dialogAddUser = false\">取消</el-button>\n                    </el-form-item>\n                </el-form>\n            </el-dialog>\n        </div>\n    </div>\n</template>\n<script>\n    import base from \"@/api/base\"\n    import request from \"@/utils/request\"\n    import axios from \"axios\";\n    export default {\n        data(){\n            //设置密码校验\n            var validatePass = (rule, value, callback) => {\n                if (value === '') {\n                    callback(new Error('请输入密码'));\n                } else {\n                    if (this.userForm.checkPass !== '') {\n                        this.$refs.userForm.validateField('checkPass');\n                    }\n                    callback();\n                }\n            };\n            var validatePass2 = (rule, value, callback) => {\n                if (value === '') {\n                    callback(new Error('请再次输入密码'));\n                } else if (value !== this.userForm.password) {\n                    callback(new Error('两次输入密码不一致!'));\n                } else {\n                    callback();\n                }\n            };\n            return{\n                //表单数据\n                userDate:[],\n                //选择数据\n                multipleSelection:[],\n                //添加数据\n                userForm:{\n                    username:'',\n                    password:'',\n                    checkPass:'',\n                    perms:''\n                },\n                //添加数据页面开关\n                dialogAddUser:false,\n                //设置密码校验\n                rules: {\n                    password: [\n                        { validator: validatePass, trigger: 'blur' }\n                    ],\n                    checkPass: [\n                        { validator: validatePass2, trigger: 'blur' }\n                    ]\n                }\n            }\n        },\n        methods:{\n            //添加用户单击事件\n            UserAddSubmit(formName){\n                this.$refs[formName].validate((valid) => {\n                    if (valid) {\n                        this.userAdd(this.userForm.username,this.userForm.password,this.userForm.perms);\n                    } else {\n                        this.$message.error(\"两次输入密码不一致!\")\n                        return false;\n                    }\n                });\n            },\n            //删除用户单击事件\n            UserDelSubmit(){\n                console.log('删除用户');\n            },\n            //修改用户单击事件\n            handleEdit(){\n                console.log('修改用户');\n            },\n            //选择用户事件\n            handleSelectionChange(val){\n                this.multipleSelection = val;\n            },\n            //获取后台数据\n            async userRequest(){\n                await request({\n                    method: 'GET',\n                    url:'/user/userinformation'\n                }).then(res => {\n                    this.userDate = res.data.data;\n                }).catch(err =>{\n                    this.$message.error(err.message)\n                })\n            },\n            async userAdd(username,password,perms){\n                request({\n                    method: 'POST',\n                    url:'/user/register',\n                    data:{username,password,perms}\n                }).then(res => {\n                    if (res.data.state === 200){\n                        this.$message.success(\"添加成功!\");\n                        this.userRequest();\n                        this.dialogAddUser=false;\n                    }\n                }).catch(err => {\n                    this.$message.error(err.message);\n                })\n            }\n        },\n        created(){\n            this.userRequest();\n        }\n    }\n</script>\n\n<style lang=\"less\" scoped>\n    .usermanagementClass{\n        margin: 20px;\n    }\n    .header{\n        display: flex;\n    }\n    .header button {\n        margin-left: 20px;\n    }\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}