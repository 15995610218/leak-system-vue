{"ast":null,"code":"import store from \"@/store\";\nimport { logout } from \"../../api/index\";\nimport { requestRevisePassword } from \"@/api\";\nexport default {\n  data() {\n    //设置密码校验\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.modifyPassword.checkPass !== '') {\n          this.$refs.modifyPassword.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.modifyPassword.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      //用户名\n      username: '',\n      //修改密码弹框\n      dialogModifyPassword: false,\n      //设置密码校验\n      rules: {\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }]\n      },\n      //修改密码数据\n      modifyPassword: {}\n    };\n  },\n  methods: {\n    //修改密码事件\n    reviseVisible() {\n      this.modifyPassword.username = this.username;\n      this.dialogModifyPassword = true;\n    },\n    //退出单击事件\n    outerVisible() {\n      this.logouter();\n    },\n    async logouter() {\n      let data = await logout();\n      if (data.state === 200) {\n        this.$message.success(\"成功退出\");\n        this.$store.commit(\"LOGIN_delUserName\");\n        this.$store.commit(\"LOGIN_delPERMS\");\n        this.$store.commit(\"LOGIN_OUT\");\n        this.$router.replace(\"/login\");\n      }\n    },\n    //修改密码单击事件\n    PasswordModifySubmit() {\n      this.revisePassword(this.modifyPassword);\n      this.dialogModifyPassword = false;\n    },\n    async revisePassword(modifyPassword) {\n      let resultPassword = await requestRevisePassword(modifyPassword);\n      if (resultPassword.state === 200) {\n        this.$message.success(\"重置成功\");\n        this.modifyPassword = {};\n      } else {\n        this.$message.error(\"重置失败\");\n      }\n    }\n  },\n  created() {\n    if (store.state.UserName) {\n      this.username = store.state.UserName;\n    }\n  }\n};","map":{"version":3,"mappings":"AAkDA;AACA;AACA;AAEA;EACAA;IACA;IACA;MACA;QACAC;MACA;QACA;UACA;QACA;QACAA;MACA;IACA;IACA;MACA;QACAA;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACA;MACAC;MACA;MACAC;MACA;MACAC;QACAC,WACA;UAAAC;UAAAC;QAAA,EACA;QACAC,YACA;UAAAF;UAAAC;QAAA;MAEA;MACA;MACAE;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;IACA;IACA;IACAC;MACA;IACA;IACA;MACA;MACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;QACA;MACA;IACA;EACA;EACAC;IACA;MACA;IACA;EACA;AACA","names":["data","callback","username","dialogModifyPassword","rules","password","validator","trigger","checkPass","modifyPassword","methods","reviseVisible","outerVisible","PasswordModifySubmit","created"],"sourceRoot":"src/views/layout","sources":["content.vue"],"sourcesContent":["<template>\n    <div>\n<!--        导航栏位-->\n        <div class=\"header\">\n            <el-header style=\"text-align: right\">\n                <el-dropdown>\n                    <i class=\"el-icon-setting\" style=\"margin-right: 15px\"></i>\n                    <el-dropdown-menu slot=\"dropdown\">\n                        <el-dropdown-item>\n                            <el-button @click=\"reviseVisible\">修改密码</el-button>\n                        </el-dropdown-item>\n                        <el-dropdown-item>\n                            <el-button @click=\"outerVisible\">退出登陆</el-button>\n                        </el-dropdown-item>\n                    </el-dropdown-menu>\n                </el-dropdown>\n                <span>{{username}}</span>\n            </el-header>\n        </div>\n<!--        内容显示-->\n        <div class=\"content\">\n            <router-view/>\n        </div>\n<!--        修改密码-->\n        <el-dialog\n                title=\"修改密码\"\n                :visible.sync=\"dialogModifyPassword\">\n            <el-form ref=\"modifyPassword\" :model=\"modifyPassword\" :rules=\"rules\" label-width=\"80px\">\n                <el-form-item label=\"账号名称\">\n                    <el-input v-model=\"modifyPassword.username\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"旧的密码\">\n                    <el-input v-model=\"modifyPassword.oldpassword\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"密码\" prop=\"password\">\n                    <el-input type=\"password\" v-model=\"modifyPassword.password\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"确认密码\" prop=\"checkPass\">\n                    <el-input type=\"password\" v-model=\"modifyPassword.checkPass\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"PasswordModifySubmit\">提交</el-button>\n                    <el-button @click=\"dialogModifyPassword = false\">取消</el-button>\n                </el-form-item>\n            </el-form>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\n    import store from \"@/store\";\n    import { logout } from \"../../api/index\";\n    import { requestRevisePassword } from \"@/api\";\n\n    export default {\n        data(){\n            //设置密码校验\n            var validatePass = (rule, value, callback) => {\n                if (value === '') {\n                    callback(new Error('请输入密码'));\n                } else {\n                    if (this.modifyPassword.checkPass !== '') {\n                        this.$refs.modifyPassword.validateField('checkPass');\n                    }\n                    callback();\n                }\n            };\n            var validatePass2 = (rule, value, callback) => {\n                if (value === '') {\n                    callback(new Error('请再次输入密码'));\n                } else if (value !== this.modifyPassword.password) {\n                    callback(new Error('两次输入密码不一致!'));\n                } else {\n                    callback();\n                }\n            };\n            return{\n                //用户名\n                username:'',\n                //修改密码弹框\n                dialogModifyPassword:false,\n                //设置密码校验\n                rules: {\n                    password: [\n                        { validator: validatePass, trigger: 'blur' }\n                    ],\n                    checkPass: [\n                        { validator: validatePass2, trigger: 'blur' }\n                    ]\n                },\n                //修改密码数据\n                modifyPassword:{},\n            }\n        },\n        methods:{\n            //修改密码事件\n            reviseVisible(){\n                this.modifyPassword.username = this.username;\n                this.dialogModifyPassword = true;\n            },\n            //退出单击事件\n            outerVisible(){\n                this.logouter();\n            },\n            async logouter(){\n                let data = await logout();\n                if (data.state === 200){\n                    this.$message.success(\"成功退出\");\n                    this.$store.commit(\"LOGIN_delUserName\");\n                    this.$store.commit(\"LOGIN_delPERMS\");\n                    this.$store.commit(\"LOGIN_OUT\");\n                    this.$router.replace(\"/login\");\n                }\n            },\n            //修改密码单击事件\n            PasswordModifySubmit(){\n                this.revisePassword(this.modifyPassword);\n                this.dialogModifyPassword = false;\n            },\n            async revisePassword(modifyPassword){\n                let resultPassword = await requestRevisePassword(modifyPassword);\n                if (resultPassword.state === 200){\n                    this.$message.success(\"重置成功\");\n                    this.modifyPassword = {};\n                }else {\n                    this.$message.error(\"重置失败\");\n                }\n            }\n        },\n        created(){\n            if (store.state.UserName){\n                this.username = store.state.UserName;\n            }\n        }\n    }\n</script>\n\n<style>\n    .el-header {\n        background-color: #B3C0D1;\n        color: #333;\n        line-height: 60px;\n    }\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}